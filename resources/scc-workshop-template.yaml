#@ load("@ytt:data", "data")
#@ load("@ytt:base64", "base64")
#@ load("@ytt:json", "json")
---
apiVersion: learningcenter.tanzu.vmware.com/v1beta1
kind: Workshop
metadata:
  name: scc-workshop
spec:
  title: Supply Chain Choreographer
  description: A workshop that demonstrates all the capabilities Supply Chain Choreographer provides.
  vendor: tanzu.vmware.com
  difficulty: beginner
  duration: 200m
  url: https://github.com/tsalm-pivotal/tap-cartographer-workshop
  content:
    image: #@ "{}/tap-workshop/tap-overview-workshop:latest".format(data.values.container_registry.hostname)
    files: #@ "github.com/{}/tap-cartographer-workshop/workshop?ref={}".format(data.values.workshop_git.username,data.values.workshop_git.branch)
  session:
    namespaces:
      budget: custom
    applications:
      terminal:
        enabled: true
        layout: split
      console:
        enabled: true
      editor:
        enabled: true
    env: 
    - name: TAP_INGRESS
      value: #@ data.values.tap.ingress_domain
    - name: TAP_CNRS_SUBDOMAIN
      value: #@ data.values.tap.ingress_domain
    - name: CONTAINER_REGISTRY_HOSTNAME
      value: #@ data.values.container_registry.hostname
    - name: CONTAINER_REGISTRY_USERNAME
      value: #@ data.values.container_registry.username
    - name: CONTAINER_REGISTRY_PASSWORD
      value: #@ data.values.container_registry.password
    - name: CONTAINER_REGISTRY_REPOSITORY
      value: #@ data.values.container_registry.repository
    - name: GITOPS_REPOSITORY
      value: #@ "{}/$(session_namespace).git".format(data.values.gitea.https_repository_prefix)
    - name: GITOPS_REPOSITORY_USERNAME
      value: #@ data.values.gitea.basic_auth_username
    - name: GITOPS_REPOSITORY_PASSWORD
      value: #@ data.values.gitea.basic_auth_password
    objects:
      - apiVersion: v1
        kind: LimitRange
        metadata:
          name: resource-limits
        spec:
          limits:
            - type: PersistentVolumeClaim
              max:
                storage: 10Gi
      # Permissions for tap-sa (Supply Chain)
      - apiVersion: rbac.authorization.k8s.io/v1
        kind: Role
        metadata:
          name: $(session_namespace)-default
        rules:
        - apiGroups:
          - timosalm.de
          resources:
          - githubrepositories
          verbs:
          - '*'
      - apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          name: $(session_namespace)-default
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: Role
          name: $(session_namespace)-default
        subjects:
          - kind: ServiceAccount
            name: default
          - kind: ServiceAccount
            name: $(service_account)
      - apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          name: $(session_namespace)-default-permit-deliverable
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: deliverable
        subjects:
          - kind: ServiceAccount
            name: default
          - kind: ServiceAccount
            name: $(service_account)
      - apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          name: $(session_namespace)-default-permit-workload
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: workload
        subjects:
          - kind: ServiceAccount
            name: default
          - kind: ServiceAccount
            name: $(service_account)
      # Permissions for workshop session
            # Permissions for workshop session
      - apiVersion: rbac.authorization.k8s.io/v1
        kind: Role
        metadata:
          name: $(session_namespace)-session
          namespace: $(session_namespace)
        rules:
        - apiGroups: [tekton.dev]
          resources: [tasks]
          verbs: ['*']
      - apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          name: $(session_namespace)-session-rb
          namespace: $(session_namespace)
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: Role
          name: $(session_namespace)-session
        subjects:
          - kind: ServiceAccount
            namespace: $(workshop_namespace)
            name: $(service_account)
      # Install grype
      - apiVersion: packaging.carvel.dev/v1alpha1
        kind: PackageInstall
        metadata:
          name: $(session_namespace)-grype
          namespace: tap-install
        spec:
          serviceAccountName: tap-install-sa
          packageRef:
            refName: grype.scanning.apps.tanzu.vmware.com
            versionSelection:
              constraints: ">=0.0.0"
              prereleases:
                identifiers: [beta, build]
          values:
          - secretRef:
              name: $(session_namespace)-grype-values
      - apiVersion: v1
        kind: Secret
        metadata:
          name: $(session_namespace)-grype-values
          namespace: tap-install
        stringData:
          values.yaml: |
            ---
            namespace: $(session_namespace)
            targetImagePullSecret: registry-credentials

      # Scan policy
      - apiVersion: scanning.apps.tanzu.vmware.com/v1beta1
        kind: ScanPolicy
        metadata:
          name: scan-policy
        spec:
          regoFile: |
            package policies

            default isCompliant = false

            # Accepted Values: "Critical", "High", "Medium", "Low", "Negligible", "UnknownSeverity"
            violatingSeverities := ["Critical","High","UnknownSeverity"]
            ignoreCVEs := []

            contains(array, elem) = true {
              array[_] = elem
            } else = false { true }

            isSafe(match) {
              fails := contains(violatingSeverities, match.Ratings.Rating[_].Severity)
              not fails
            }

            isSafe(match) {
              ignore := contains(ignoreCVEs, match.Id)
              ignore
            }

            isCompliant = isSafe(input.currentVulnerability)
      # Conventions Service
      - apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRole
        metadata:
          name: $(session_namespace)-cluster-resources-reader
        rules:
        - apiGroups: [conventions.apps.tanzu.vmware.com]
          resources: ["clusterpodconventions"]
          verbs: ["get", "watch", "list"]
      - apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: $(session_namespace)-cluster-resources
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: $(session_namespace)-cluster-resources-reader
        subjects:
        - kind: Group
          name: system:serviceaccounts:$(workshop_namespace)
          apiGroup: rbac.authorization.k8s.io
      # supply chain
      - apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRole
        metadata:
          name: $(session_namespace)-cluster-supplychain
        rules:
        - apiGroups: [carto.run]
          resources: ["clusterconfigtemplates", "clusterdeliveries", "clusterdeploymenttemplates","clusterimagetemplates", "clusterruntemplates", "clustersourcetemplates", "clustersupplychains", "clustertemplates"]
          verbs: ["*"]
        - apiGroups: [apiextensions.k8s.io]
          resources: ["customresourcedefinitions"]
          verbs: ["get", "watch", "list"]
      - apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: $(session_namespace)-cluster-supplychain
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: $(session_namespace)-cluster-supplychain
        subjects:
          - kind: Group
            name: system:serviceaccounts:$(workshop_namespace)
            apiGroup: rbac.authorization.k8s.io
      - apiVersion: v1
        kind: Secret
        metadata:
          annotations:
            tekton.dev/git-0: #@ data.values.gitops.host
          name: git-https
        type: kubernetes.io/basic-auth
        stringData:
          username: #@ data.values.gitops.username
          password: #@ data.values.gitops.password
